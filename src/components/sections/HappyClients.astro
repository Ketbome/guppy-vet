---
import ClientCard from '../ui/ClientCard.astro';

const clients = [
	{
		name: "Guppy",
		image: "/cliente-mascota.jpeg",
		status: "Saludable",
		treatment: "Control sano y castración",
		treatmentIcon: "fa-stethoscope",
		badgeText: "Atendido",
		badgeIcon: "fa-heart"
	},
	{
		name: "Max y Nina",
		image: "/cliente-mascota-2.jpeg",
		status: "Recuperados",
		treatment: "Control por gastroenteritis",
		treatmentIcon: "fa-pills",
		badgeText: "Tratados",
		badgeIcon: "fa-shield-alt"
	},
	{
		name: "Molly",
		image: "/cliente-mascota-3.jpeg",
		status: "Estable",
		treatment: "Control por hipertiroidismo",
		treatmentIcon: "fa-heartbeat",
		badgeText: "Controlada",
		badgeIcon: "fa-calendar-check"
	},
	{
		name: "Lila",
		image: "/cliente-mascota-4.jpeg",
		status: "Limpia",
		treatment: "Destartraje",
		treatmentIcon: "fa-tooth",
		badgeText: "Cuidada",
		badgeIcon: "fa-star"
	},
	{
		name: "Jiraiya",
		image: "/cliente-mascota-5.jpeg",
		status: "Recuperado",
		treatment: "Castración",
		treatmentIcon: "fa-stethoscope",
		badgeText: "Operado",
		badgeIcon: "fa-check"
	},
	{
		name: "Blue",
		image: "/cliente-mascota-6.jpeg",
		status: "Protegido",
		treatment: "Control sano y vacunas",
		treatmentIcon: "fa-syringe",
		badgeText: "Vacunado",
		badgeIcon: "fa-shield-alt"
	},
	{
		name: "Polly",
		image: "/cliente-mascota-7.jpeg",
		status: "Saludable",
		treatment: "Control sano y vacunas",
		treatmentIcon: "fa-syringe",
		badgeText: "Protegida",
		badgeIcon: "fa-heart"
	},
	{
		name: "Simón",
		image: "/cliente-mascota-8.jpeg",
		status: "Recuperado",
		treatment: "Tratamiento parvovirus",
		treatmentIcon: "fa-medkit",
		badgeText: "Curado",
		badgeIcon: "fa-trophy"
	}
];
---

<section class="happy-clients">
	<div class="container">
		<div class="section-header">
			<span class="section-subtitle">Historias de éxito</span>
			<h2 class="section-title">Mascotas Felices y Saludables</h2>
			<p class="section-description">
				Conoce a algunas de las adorables mascotas que han confiado en nuestro cuidado profesional y amor incondicional
			</p>
		</div>
		
		<div class="clients-showcase">
			<div class="clients-carousel">
				<div class="carousel-container">
					<div class="carousel-track" id="carouselTrack">
						{clients.map((client) => (
							<ClientCard {...client} />
						))}
					</div>
				</div>
				
				<div class="carousel-navigation">
					<button class="nav-btn nav-btn--prev" id="prevBtn" aria-label="Anterior">
						<i class="fas fa-chevron-left"></i>
					</button>
					<div class="carousel-progress">
						<div class="progress-bar" id="progressBar"></div>
					</div>
					<button class="nav-btn nav-btn--next" id="nextBtn" aria-label="Siguiente">
						<i class="fas fa-chevron-right"></i>
					</button>
				</div>
			</div>
			
			<div class="clients-stats">
				<div class="stat-item">
					<div class="stat-number">150+</div>
					<div class="stat-label">Mascotas atendidas</div>
				</div>
				<div class="stat-item">
					<div class="stat-number">98%</div>
					<div class="stat-label">Éxito en tratamientos</div>
				</div>
				<div class="stat-item">
					<div class="stat-number">4.8★</div>
					<div class="stat-label">Calificación promedio</div>
				</div>
			</div>
		</div>
	</div>
</section>

<script>
	// Enhanced Carousel functionality with mobile fixes
	document.addEventListener('DOMContentLoaded', function() {
		const carousel = document.querySelector('#carouselTrack') as HTMLElement;
		const prevBtn = document.querySelector('#prevBtn') as HTMLButtonElement;
		const nextBtn = document.querySelector('#nextBtn') as HTMLButtonElement;
		const progressBar = document.querySelector('#progressBar') as HTMLElement;
		const cards = document.querySelectorAll('.client-card') as NodeListOf<HTMLElement>;
		const container = document.querySelector('.carousel-container') as HTMLElement;
		
		if (!carousel || !prevBtn || !nextBtn || !progressBar || cards.length === 0 || !container) return;
		
		let currentIndex = 0;
		let isAnimating = false;
		
		// Responsive card widths and gaps
		const getCardWidth = () => {
			const screenWidth = window.innerWidth;
			if (screenWidth <= 480) return 280; // mobile small: 260px card + 20px gap
			if (screenWidth <= 768) return 300; // mobile: 280px card + 20px gap
			return 340; // desktop: 320px card + 20px gap
		};
		
		const getVisibleCards = () => {
			const containerWidth = container.offsetWidth;
			const cardWidth = getCardWidth();
			const visibleCards = Math.floor(containerWidth / cardWidth);
			return Math.max(1, visibleCards); // Always show at least 1 card
		};
		
		let cardWidth = getCardWidth();
		let visibleCards = getVisibleCards();
		let maxIndex = Math.max(0, cards.length - visibleCards);
		
		function updateCarousel(animate = true) {
			if (isAnimating && animate) return;
			isAnimating = true;
			
			// Ensure currentIndex is within bounds
			currentIndex = Math.max(0, Math.min(currentIndex, maxIndex));
			
			const translateX = -currentIndex * cardWidth;
			carousel.style.transition = animate ? 'transform 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94)' : 'none';
			carousel.style.transform = `translateX(${translateX}px)`;
			
			// Update progress bar
			const progressPercent = maxIndex > 0 ? (currentIndex / maxIndex) * 100 : 0;
			progressBar.style.width = `${progressPercent}%`;
			
			// Update button states
			prevBtn.style.opacity = currentIndex === 0 ? '0.4' : '1';
			nextBtn.style.opacity = currentIndex >= maxIndex ? '0.4' : '1';
			prevBtn.disabled = currentIndex === 0;
			nextBtn.disabled = currentIndex >= maxIndex;
			
			if (animate) {
				setTimeout(() => {
					isAnimating = false;
				}, 800);
			} else {
				isAnimating = false;
			}
		}
		
		function nextSlide() {
			if (currentIndex < maxIndex && !isAnimating) {
				currentIndex++;
				updateCarousel();
			}
		}
		
		function prevSlide() {
			if (currentIndex > 0 && !isAnimating) {
				currentIndex--;
				updateCarousel();
			}
		}
		
		nextBtn.addEventListener('click', nextSlide);
		prevBtn.addEventListener('click', prevSlide);
		
		// Auto-scroll functionality (disabled on mobile for better UX)
		let autoScrollInterval: NodeJS.Timeout | null = null;
		
		function startAutoScroll() {
			if (window.innerWidth > 768) { // Only on desktop
				autoScrollInterval = setInterval(() => {
					if (currentIndex < maxIndex) {
						currentIndex++;
					} else {
						currentIndex = 0;
					}
					updateCarousel();
				}, 5000);
			}
		}
		
		function stopAutoScroll() {
			if (autoScrollInterval) {
				clearInterval(autoScrollInterval);
				autoScrollInterval = null;
			}
		}
		
		// Start auto-scroll
		startAutoScroll();
		
		// Pause auto-scroll on hover (desktop only)
		const carouselContainer = document.querySelector('.clients-carousel') as HTMLElement;
		if (carouselContainer && window.innerWidth > 768) {
			carouselContainer.addEventListener('mouseenter', stopAutoScroll);
			carouselContainer.addEventListener('mouseleave', startAutoScroll);
		}
		
		// Enhanced touch support for mobile
		let startX = 0;
		let startY = 0;
		let isDragging = false;
		let startTime = 0;
		
		carousel.addEventListener('touchstart', (e) => {
			startX = e.touches[0].clientX;
			startY = e.touches[0].clientY;
			startTime = Date.now();
			isDragging = false;
			stopAutoScroll();
		}, { passive: true });
		
		carousel.addEventListener('touchmove', (e) => {
			if (!startX || !startY) return;
			
			const diffX = startX - e.touches[0].clientX;
			const diffY = startY - e.touches[0].clientY;
			
			if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 10) {
				isDragging = true;
				e.preventDefault();
			}
		}, { passive: false });
		
		carousel.addEventListener('touchend', (e) => {
			if (!startX || !startY || !isDragging) {
				startAutoScroll();
				return;
			}
			
			const diffX = startX - e.changedTouches[0].clientX;
			const diffTime = Date.now() - startTime;
			const velocity = Math.abs(diffX) / diffTime;
			
			// More sensitive swipe detection
			if (Math.abs(diffX) > 50 || velocity > 0.3) {
				if (diffX > 0) {
					nextSlide();
				} else {
					prevSlide();
				}
			}
			
			startX = 0;
			startY = 0;
			isDragging = false;
			startAutoScroll();
		}, { passive: true });
		
		// Responsive handling with debouncing
		let resizeTimeout: NodeJS.Timeout;
		window.addEventListener('resize', () => {
			clearTimeout(resizeTimeout);
			resizeTimeout = setTimeout(() => {
				cardWidth = getCardWidth();
				visibleCards = getVisibleCards();
				maxIndex = Math.max(0, cards.length - visibleCards);
				
				// Reset position if out of bounds
				if (currentIndex > maxIndex) {
					currentIndex = maxIndex;
				}
				
				updateCarousel(false);
				
				// Restart auto-scroll with new conditions
				stopAutoScroll();
				startAutoScroll();
			}, 250);
		});
		
		// Initialize
		updateCarousel(false);
		
		// Intersection Observer for animations
		const observerOptions = {
			threshold: 0.1,
			rootMargin: '0px 0px -50px 0px'
		};
		
		const observer = new IntersectionObserver((entries) => {
			entries.forEach(entry => {
				if (entry.isIntersecting) {
					entry.target.classList.add('animate-in');
				}
			});
		}, observerOptions);
		
		cards.forEach(card => {
			observer.observe(card);
		});
	});
</script>

<style>
	/* Happy Clients Section */
	.happy-clients {
		padding: 6rem 0;
		background: linear-gradient(135deg, #f0fffe 0%, #e6faf8 50%, #d1f5f0 100%);
		position: relative;
		overflow: hidden;
	}

	.happy-clients::before {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: url("data:image/svg+xml,%3Csvg width='80' height='80' viewBox='0 0 80 80' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23259a8c' fill-opacity='0.04'%3E%3Cpath d='M40 30c-5.5 0-10 4.5-10 10s4.5 10 10 10 10-4.5 10-10-4.5-10-10-10zm0 15c-2.8 0-5-2.2-5-5s2.2-5 5-5 5 2.2 5 5-2.2 5-5 5z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E") repeat;
		pointer-events: none;
		opacity: 0.6;
		animation: backgroundMove 20s ease-in-out infinite;
	}

	.happy-clients::after {
		content: '';
		position: absolute;
		top: -50%;
		left: -50%;
		width: 200%;
		height: 200%;
		background: radial-gradient(circle at 30% 20%, rgba(37, 154, 140, 0.08) 0%, transparent 50%),
		            radial-gradient(circle at 70% 80%, rgba(45, 212, 191, 0.06) 0%, transparent 50%);
		pointer-events: none;
		animation: floatingShapes 25s ease-in-out infinite;
	}

	@keyframes backgroundMove {
		0%, 100% { transform: translateX(0); }
		50% { transform: translateX(-20px); }
	}

	@keyframes floatingShapes {
		0%, 100% { transform: rotate(0deg) translate(0, 0); }
		33% { transform: rotate(1deg) translate(10px, -10px); }
		66% { transform: rotate(-1deg) translate(-10px, 10px); }
	}

	.clients-showcase {
		position: relative;
		z-index: 1;
	}

	/* Carousel Styles */
	.clients-carousel {
		position: relative;
		margin-bottom: 4rem;
	}

	.carousel-container {
		overflow: hidden;
		position: relative;
		border-radius: 24px;
		background: rgba(255, 255, 255, 0.8);
		backdrop-filter: blur(20px);
		padding: 3rem 2rem;
		box-shadow: 0 25px 50px rgba(0, 0, 0, 0.1), 
		            0 0 0 1px rgba(255, 255, 255, 0.2);
		border: 2px solid rgba(255, 255, 255, 0.3);
	}

	.carousel-container::before {
		content: '';
		position: absolute;
		top: -50%;
		left: -50%;
		width: 200%;
		height: 200%;
		background: conic-gradient(from 0deg at 50% 50%, 
		                          rgba(37, 154, 140, 0.05) 0deg, 
		                          transparent 60deg, 
		                          rgba(45, 212, 191, 0.03) 120deg, 
		                          transparent 180deg);
		animation: rotateGradient 15s linear infinite;
		pointer-events: none;
		z-index: -1;
	}

	@keyframes rotateGradient {
		0% { transform: rotate(0deg); }
		100% { transform: rotate(360deg); }
	}

	.carousel-track {
		display: flex;
		gap: 2rem;
		transition: transform 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
	}

	/* Navigation */
	.carousel-navigation {
		display: flex;
		justify-content: center;
		align-items: center;
		gap: 1.5rem;
		margin-top: 2.5rem;
	}

	.carousel-progress {
		width: 120px;
		height: 6px;
		background: rgba(37, 154, 140, 0.2);
		border-radius: 3px;
		overflow: hidden;
		position: relative;
	}

	.progress-bar {
		height: 100%;
		background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
		border-radius: 3px;
		transition: width 0.3s ease;
		width: 0%;
	}

	.nav-btn {
		width: 60px;
		height: 60px;
		border: none;
		border-radius: 50%;
		background: linear-gradient(135deg, var(--primary-color), var(--accent-color));
		color: white;
		cursor: pointer;
		transition: all 0.4s ease;
		display: flex;
		align-items: center;
		justify-content: center;
		font-size: 1.4rem;
		box-shadow: 0 8px 30px rgba(37, 154, 140, 0.3),
		            0 0 0 0 rgba(37, 154, 140, 0.4);
		position: relative;
		overflow: hidden;
	}

	.nav-btn::before {
		content: '';
		position: absolute;
		top: 0;
		left: -100%;
		width: 100%;
		height: 100%;
		background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
		transition: left 0.6s ease;
	}

	.nav-btn:hover:not(:disabled) {
		background: linear-gradient(135deg, var(--accent-color), #20d4aa);
		transform: translateY(-4px) scale(1.05);
		box-shadow: 0 15px 40px rgba(37, 154, 140, 0.4),
		            0 0 0 10px rgba(37, 154, 140, 0.1);
	}

	.nav-btn:hover:not(:disabled)::before {
		left: 100%;
	}

	.nav-btn:active:not(:disabled) {
		transform: translateY(-2px) scale(1.02);
	}

	.nav-btn:disabled {
		opacity: 0.4;
		cursor: not-allowed;
		transform: none;
		background: #94a3b8;
		box-shadow: 0 4px 15px rgba(148, 163, 184, 0.2);
	}

	/* Stats Section */
	.clients-stats {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
		gap: 2rem;
		margin-top: 4rem;
	}

	.stat-item {
		text-align: center;
		padding: 2.5rem 2rem;
		background: linear-gradient(135deg, rgba(255, 255, 255, 0.9) 0%, rgba(255, 255, 255, 0.7) 100%);
		border-radius: 20px;
		box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1),
		            0 0 0 1px rgba(255, 255, 255, 0.3);
		border: 2px solid rgba(255, 255, 255, 0.2);
		backdrop-filter: blur(20px);
		transition: all 0.4s ease;
		position: relative;
		overflow: hidden;
	}

	.stat-item::before {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		height: 4px;
		background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
		transform: scaleX(0);
		transition: transform 0.4s ease;
	}

	.stat-item:hover {
		transform: translateY(-8px) scale(1.02);
		box-shadow: 0 30px 60px rgba(0, 0, 0, 0.15),
		            0 0 0 1px rgba(255, 255, 255, 0.4);
	}

	.stat-item:hover::before {
		transform: scaleX(1);
	}

	.stat-number {
		font-size: 3rem;
		font-weight: 800;
		margin-bottom: 0.75rem;
		background: linear-gradient(135deg, var(--primary-color), var(--accent-color), #20d4aa);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
		position: relative;
		display: inline-block;
	}

	.stat-number::after {
		content: '';
		position: absolute;
		bottom: -8px;
		left: 50%;
		transform: translateX(-50%);
		width: 30px;
		height: 3px;
		background: linear-gradient(90deg, var(--primary-color), var(--accent-color));
		border-radius: 2px;
		opacity: 0;
		transition: opacity 0.4s ease;
	}

	.stat-item:hover .stat-number::after {
		opacity: 1;
	}

	.stat-label {
		color: var(--text-dark);
		font-weight: 600;
		font-size: 1rem;
		letter-spacing: 0.5px;
		text-transform: uppercase;
	}

	/* Responsive Design */
	@media (max-width: 768px) {
		.happy-clients {
			padding: 4rem 0;
		}

		.carousel-container {
			padding: 2rem 1rem;
			margin: 0 -1rem;
			border-radius: 16px;
		}

		.carousel-track {
			gap: 1.5rem;
		}

		.clients-stats {
			grid-template-columns: repeat(2, 1fr);
			gap: 1.5rem;
		}

		.stat-item {
			padding: 2rem 1.5rem;
		}

		.stat-number {
			font-size: 2.5rem;
		}

		.nav-btn {
			width: 50px;
			height: 50px;
			font-size: 1.2rem;
		}

		.carousel-progress {
			width: 80px;
		}
	}

	@media (max-width: 480px) {
		.carousel-track {
			gap: 1rem;
		}

		.clients-stats {
			grid-template-columns: 1fr;
			gap: 1rem;
		}

		.carousel-navigation {
			gap: 1rem;
		}

		.nav-btn {
			width: 45px;
			height: 45px;
			font-size: 1.1rem;
		}

		.carousel-progress {
			width: 60px;
			height: 4px;
		}

		.stat-item {
			padding: 1.5rem;
		}

		.stat-number {
			font-size: 2.2rem;
		}

		.stat-label {
			font-size: 0.9rem;
		}
	}


</style>

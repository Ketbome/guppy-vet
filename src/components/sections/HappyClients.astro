---
import ClientCard from '../ui/ClientCard.astro';

const clients = [
	{
		name: "Guppy",
		image: "/cliente-mascota.jpeg",
		status: "Saludable",
		treatment: "Cirugía ortopédica",
		treatmentIcon: "fa-stethoscope",
		badgeText: "Recuperado",
		badgeIcon: "fa-heart"
	},
	{
		name: "Max y Nina",
		image: "/cliente-mascota-2.jpeg",
		status: "Saludable",
		treatment: "Plan preventivo",
		treatmentIcon: "fa-syringe",
		badgeText: "Protegida",
		badgeIcon: "fa-shield-alt"
	},
	{
		name: "Rocky",
		image: "/cliente-mascota-3.jpeg",
		status: "Excelente",
		treatment: "Dermatología",
		treatmentIcon: "fa-pills",
		badgeText: "Tratado",
		badgeIcon: "fa-leaf"
	},
	{
		name: "Bella",
		image: "/cliente-mascota-4.jpeg",
		status: "Activa",
		treatment: "Medicina preventiva",
		treatmentIcon: "fa-heartbeat",
		badgeText: "Monitoreada",
		badgeIcon: "fa-calendar-check"
	},
	{
		name: "Mimi",
		image: "/cliente-mascota-5.jpeg",
		status: "Elegante",
		treatment: "Estética felina",
		treatmentIcon: "fa-spa",
		badgeText: "Cuidada",
		badgeIcon: "fa-cut"
	},
	{
		name: "Thor",
		image: "/cliente-mascota-6.jpeg",
		status: "Fuerte",
		treatment: "Rehabilitación",
		treatmentIcon: "fa-dumbbell",
		badgeText: "Recuperado",
		badgeIcon: "fa-running"
	},
	{
		name: "Coco",
		image: "/cliente-mascota-7.jpeg",
		status: "Próspero",
		treatment: "Medicina exótica",
		treatmentIcon: "fa-microscope",
		badgeText: "Especial",
		badgeIcon: "fa-star"
	},
	{
		name: "Nala",
		image: "/cliente-mascota-8.jpeg",
		status: "Atlética",
		treatment: "Nutrición clínica",
		treatmentIcon: "fa-apple-alt",
		badgeText: "En forma",
		badgeIcon: "fa-weight"
	}
];
---

<section class="happy-clients">
	<div class="container">
		<div class="section-header">
			<span class="section-subtitle">Historias de éxito</span>
			<h2 class="section-title">Mascotas Felices y Saludables</h2>
			<p class="section-description">
				Conoce a algunas de las adorables mascotas que han confiado en nuestro cuidado profesional y amor incondicional
			</p>
		</div>
		
		<div class="clients-showcase">
			<div class="clients-carousel">
				<div class="carousel-container">
					<div class="carousel-track" id="carouselTrack">
						{clients.map((client) => (
							<ClientCard {...client} />
						))}
					</div>
				</div>
				
				<div class="carousel-navigation">
					<button class="nav-btn nav-btn--prev" id="prevBtn" aria-label="Anterior">
						<i class="fas fa-chevron-left"></i>
					</button>
					<button class="nav-btn nav-btn--next" id="nextBtn" aria-label="Siguiente">
						<i class="fas fa-chevron-right"></i>
					</button>
				</div>
			</div>
			
			<div class="clients-stats">
				<div class="stat-item">
					<div class="stat-number">150+</div>
					<div class="stat-label">Mascotas atendidas</div>
				</div>
				<div class="stat-item">
					<div class="stat-number">98%</div>
					<div class="stat-label">Éxito en tratamientos</div>
				</div>
				<div class="stat-item">
					<div class="stat-number">4.8★</div>
					<div class="stat-label">Calificación promedio</div>
				</div>
			</div>
		</div>
	</div>
</section>

<script>
	// Enhanced Carousel functionality with mobile fixes
	document.addEventListener('DOMContentLoaded', function() {
		const carousel = document.querySelector('#carouselTrack') as HTMLElement;
		const prevBtn = document.querySelector('#prevBtn') as HTMLButtonElement;
		const nextBtn = document.querySelector('#nextBtn') as HTMLButtonElement;
		const cards = document.querySelectorAll('.client-card') as NodeListOf<HTMLElement>;
		const container = document.querySelector('.carousel-container') as HTMLElement;
		
		if (!carousel || !prevBtn || !nextBtn || cards.length === 0 || !container) return;
		
		let currentIndex = 0;
		let isAnimating = false;
		
		// Responsive card widths and gaps
		const getCardWidth = () => {
			const screenWidth = window.innerWidth;
			if (screenWidth <= 480) return 280; // mobile small: 260px card + 20px gap
			if (screenWidth <= 768) return 300; // mobile: 280px card + 20px gap
			return 340; // desktop: 320px card + 20px gap
		};
		
		const getVisibleCards = () => {
			const containerWidth = container.offsetWidth;
			const cardWidth = getCardWidth();
			const visibleCards = Math.floor(containerWidth / cardWidth);
			return Math.max(1, visibleCards); // Always show at least 1 card
		};
		
		let cardWidth = getCardWidth();
		let visibleCards = getVisibleCards();
		let maxIndex = Math.max(0, cards.length - visibleCards);
		
		function updateCarousel(animate = true) {
			if (isAnimating && animate) return;
			isAnimating = true;
			
			// Ensure currentIndex is within bounds
			currentIndex = Math.max(0, Math.min(currentIndex, maxIndex));
			
			const translateX = -currentIndex * cardWidth;
			carousel.style.transition = animate ? 'transform 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94)' : 'none';
			carousel.style.transform = `translateX(${translateX}px)`;
			
			// Update button states
			prevBtn.style.opacity = currentIndex === 0 ? '0.5' : '1';
			nextBtn.style.opacity = currentIndex >= maxIndex ? '0.5' : '1';
			prevBtn.disabled = currentIndex === 0;
			nextBtn.disabled = currentIndex >= maxIndex;
			
			if (animate) {
				setTimeout(() => {
					isAnimating = false;
				}, 600);
			} else {
				isAnimating = false;
			}
		}
		
		function nextSlide() {
			if (currentIndex < maxIndex && !isAnimating) {
				currentIndex++;
				updateCarousel();
			}
		}
		
		function prevSlide() {
			if (currentIndex > 0 && !isAnimating) {
				currentIndex--;
				updateCarousel();
			}
		}
		
		nextBtn.addEventListener('click', nextSlide);
		prevBtn.addEventListener('click', prevSlide);
		
		// Auto-scroll functionality (disabled on mobile for better UX)
		let autoScrollInterval: NodeJS.Timeout | null = null;
		
		function startAutoScroll() {
			if (window.innerWidth > 768) { // Only on desktop
				autoScrollInterval = setInterval(() => {
					if (currentIndex < maxIndex) {
						currentIndex++;
					} else {
						currentIndex = 0;
					}
					updateCarousel();
				}, 5000);
			}
		}
		
		function stopAutoScroll() {
			if (autoScrollInterval) {
				clearInterval(autoScrollInterval);
				autoScrollInterval = null;
			}
		}
		
		// Start auto-scroll
		startAutoScroll();
		
		// Pause auto-scroll on hover (desktop only)
		const carouselContainer = document.querySelector('.clients-carousel') as HTMLElement;
		if (carouselContainer && window.innerWidth > 768) {
			carouselContainer.addEventListener('mouseenter', stopAutoScroll);
			carouselContainer.addEventListener('mouseleave', startAutoScroll);
		}
		
		// Enhanced touch support for mobile
		let startX = 0;
		let startY = 0;
		let isDragging = false;
		let startTime = 0;
		
		carousel.addEventListener('touchstart', (e) => {
			startX = e.touches[0].clientX;
			startY = e.touches[0].clientY;
			startTime = Date.now();
			isDragging = false;
			stopAutoScroll();
		}, { passive: true });
		
		carousel.addEventListener('touchmove', (e) => {
			if (!startX || !startY) return;
			
			const diffX = startX - e.touches[0].clientX;
			const diffY = startY - e.touches[0].clientY;
			
			if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 10) {
				isDragging = true;
				e.preventDefault();
			}
		}, { passive: false });
		
		carousel.addEventListener('touchend', (e) => {
			if (!startX || !startY || !isDragging) {
				startAutoScroll();
				return;
			}
			
			const diffX = startX - e.changedTouches[0].clientX;
			const diffTime = Date.now() - startTime;
			const velocity = Math.abs(diffX) / diffTime;
			
			// More sensitive swipe detection
			if (Math.abs(diffX) > 50 || velocity > 0.3) {
				if (diffX > 0) {
					nextSlide();
				} else {
					prevSlide();
				}
			}
			
			startX = 0;
			startY = 0;
			isDragging = false;
			startAutoScroll();
		}, { passive: true });
		
		// Responsive handling with debouncing
		let resizeTimeout: NodeJS.Timeout;
		window.addEventListener('resize', () => {
			clearTimeout(resizeTimeout);
			resizeTimeout = setTimeout(() => {
				cardWidth = getCardWidth();
				visibleCards = getVisibleCards();
				maxIndex = Math.max(0, cards.length - visibleCards);
				
				// Reset position if out of bounds
				if (currentIndex > maxIndex) {
					currentIndex = maxIndex;
				}
				
				updateCarousel(false);
				
				// Restart auto-scroll with new conditions
				stopAutoScroll();
				startAutoScroll();
			}, 250);
		});
		
		// Initialize
		updateCarousel(false);
		
		// Intersection Observer for animations
		const observerOptions = {
			threshold: 0.1,
			rootMargin: '0px 0px -50px 0px'
		};
		
		const observer = new IntersectionObserver((entries) => {
			entries.forEach(entry => {
				if (entry.isIntersecting) {
					entry.target.classList.add('animate-in');
				}
			});
		}, observerOptions);
		
		cards.forEach(card => {
			observer.observe(card);
		});
	});
</script>

<style>
	/* Happy Clients Section */
	.happy-clients {
		padding: 5rem 0;
		background: linear-gradient(135deg, #f8fffe 0%, #edfaf9 100%);
		position: relative;
		overflow: hidden;
	}

	.happy-clients::before {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23259a8c' fill-opacity='0.03'%3E%3Cpath d='M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E") repeat;
		pointer-events: none;
		opacity: 0.5;
	}

	.clients-showcase {
		position: relative;
		z-index: 1;
	}

	/* Carousel Styles */
	.clients-carousel {
		position: relative;
		margin-bottom: 4rem;
	}

	.carousel-container {
		overflow: hidden;
		position: relative;
		border-radius: var(--border-radius);
		background: rgba(255, 255, 255, 0.5);
		backdrop-filter: blur(10px);
		padding: 2rem;
		box-shadow: var(--shadow-light);
	}

	.carousel-track {
		display: flex;
		gap: 2rem;
		transition: transform 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
	}

	/* Navigation */
	.carousel-navigation {
		display: flex;
		justify-content: center;
		gap: 1rem;
		margin-top: 2rem;
	}

	.nav-btn {
		width: 50px;
		height: 50px;
		border: none;
		border-radius: 50%;
		background: var(--primary-color);
		color: white;
		cursor: pointer;
		transition: all 0.3s ease;
		display: flex;
		align-items: center;
		justify-content: center;
		font-size: 1.25rem;
		box-shadow: var(--shadow-medium);
	}

	.nav-btn:hover:not(:disabled) {
		background: var(--accent-color);
		transform: translateY(-3px);
		box-shadow: var(--shadow-large);
	}

	.nav-btn:disabled {
		opacity: 0.5;
		cursor: not-allowed;
		transform: none;
	}

	/* Stats Section */
	.clients-stats {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
		gap: 2rem;
		margin-top: 3rem;
	}

	.stat-item {
		text-align: center;
		padding: 2rem;
		background: white;
		border-radius: var(--border-radius);
		box-shadow: var(--shadow-light);
		border: 1px solid var(--border-color);
		transition: all 0.3s ease;
	}

	.stat-item:hover {
		transform: translateY(-4px);
		box-shadow: var(--shadow-medium);
	}

	.stat-number {
		font-size: 2.5rem;
		font-weight: 700;
		color: var(--primary-color);
		margin-bottom: 0.5rem;
		background: linear-gradient(135deg, var(--primary-color), var(--accent-color));
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
	}

	.stat-label {
		color: var(--text-light);
		font-weight: 500;
		font-size: 0.9rem;
	}

	/* Responsive Design */
	@media (max-width: 768px) {
		.happy-clients {
			padding: 4rem 0;
		}

		.carousel-container {
			padding: 1rem;
			margin: 0 -1rem;
			border-radius: 0;
		}

		.carousel-track {
			gap: 1rem;
		}

		.clients-stats {
			grid-template-columns: repeat(2, 1fr);
			gap: 1rem;
		}

		.stat-item {
			padding: 1.5rem;
		}

		.stat-number {
			font-size: 2rem;
		}
	}

	@media (max-width: 480px) {
		.carousel-track {
			gap: 1rem;
		}

		.clients-stats {
			grid-template-columns: 1fr;
		}

		.carousel-navigation {
			gap: 0.5rem;
		}

		.nav-btn {
			width: 45px;
			height: 45px;
			font-size: 1.1rem;
		}
	}


</style>
